// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  name        String?
  email       String?       @unique
  phone       String?       @unique
  password    String?
  ssoToken    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  teams       Team[]
  ContentItem ContentItem[]
}

model Team {
  id          Int           @id @default(autoincrement())
  name        String
  description String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  members     User[]
  ContentItem ContentItem[]
}

model Plugin {
  id                 Int                      @id @default(autoincrement())
  name               String
  description        String?
  version            String
  url                String?
  installationStatus PluginInstallationStatus @default(PENDING)
  enabled            Boolean                  @default(true) // Whether the plugin is enabled

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  components                  PluginComponent[]
  ContentTypeSupportedPlugins ContentTypeSupportedPlugins[]
}

enum PluginInstallationStatus {
  PENDING
  INSTALLED
  FAILED
}

model PluginComponent {
  id          Int            @id @default(autoincrement())
  name        String
  description String?
  type        PluginType
  function    PluginFunction
  pluginId    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plugin Plugin @relation(fields: [pluginId], references: [id])
}

enum PluginType {
  FRONTEND
  BACKEND
}

enum PluginFunction {
  FILESTORAGE
  CONTENTTYPE
}

model ContentType {
  id          Int      @id @default(autoincrement())
  name        String
  description String?
  schema      Json?
  uiSchema    Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  ContentTypeSupportedPlugins ContentTypeSupportedPlugins[]
  ContentItem                 ContentItem[]
}

model ContentTypeSupportedPlugins {
  contentTypeId Int
  pluginId      Int

  contentTypes ContentType @relation(fields: [contentTypeId], references: [id])
  plugins      Plugin      @relation(fields: [pluginId], references: [id])

  @@id([contentTypeId, pluginId])
}

enum ContentItemSize {
  SQUARE
  LANDSCAPE
  PORTRAIT
}

model ContentItem {
  id            Int             @id @default(autoincrement())
  teamId        Int?
  userId        Int
  contentTypeId Int
  data          Json
  title         String
  size          ContentItemSize
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt

  team        Team?       @relation(fields: [teamId], references: [id])
  contentType ContentType @relation(fields: [contentTypeId], references: [id])
  user        User        @relation(fields: [userId], references: [id])
}
